Libft

Your very first own library

Summary: The aim of this project is to code a C library regrouping usual functions that
you’ll be allowed to use in all your other projects.
Резюме: Цель этого проекта-закодировать библиотеку C, перегруппировав обычные функции, которые
вам будет разрешено использовать во всех ваших других проектах.

Contents
Содержание

I 		Introduction
		Введение
II 		Common Instructions
		Общие Инструкции
III 	Mandatory part
		Обязательная часть		
III.1 	Technical considerations
		Технические соображения
III.2 	Part 1 - Libc functions
		Часть 1 - функции Libc		
III.3 	Part 2 - Additional functions
		Часть 2 - Дополнительные функции
IV 		Bonus part
		Бонусная часть

______________________________


Chapter I
Introduction
C programming can be very tedious when one doesn’t have access to those highly useful
standard functions. This project gives you the opportunity to re-write those functions,
understand them, and learn to use them. This library will help you for all your future C
projects.
Through this project, we also give you the opportunity to expand the list of functions
with your own. Take the time to expand your libft throughout the year.

Глава I
Введение
Программирование на языке Си может быть очень утомительным, если у вас нет доступа к этим чрезвычайно полезным
стандартным функциям. Этот проект дает вам возможность переписать эти функции,
понять их и научиться ими пользоваться. Эта библиотека поможет вам во всех ваших будущих карьерных
проектах.
Благодаря этому проекту мы также даем вам возможность расширить список функций
своими собственными. Потратьте время, чтобы расширить свой лифт в течение всего года.

_______________________________


Chapter II
Common Instructions
Часть 	II
Общие инструкции

• Your project must be written in accordance with the Norm. If you have bonus
files/functions, they are included in the norm check and you will receive a 0 if there
is a norm error inside.
• Ваш проект должен быть написан в соответствии с Нормой. Если у вас есть бонусные
файлы/функции, они включены в проверку нормы, и вы получите 0, если внутри
есть ошибка нормы.

• Your functions should not quit unexpectedly (segmentation fault, bus error, double
free, etc) apart from undefined behaviors. If this happens, your project will be
considered non functional and will receive a 0 during the evaluation.
• Ваши функции не должны завершаться неожиданно (ошибка сегментации, ошибка шины, двойная
свобода и т. Д.), Кроме неопределенного поведения. Если это произойдет, ваш проект будет
считаться нефункциональным и получит 0 во время оценки.

• All heap allocated memory space must be properly freed when necessary. No leaks
will be tolerated.
• При необходимости все выделенное из кучи пространство памяти должно быть правильно освобождено. Никакие утечки
не будут допущены.

• If the subject requires it, you must submit a Makefile which will compile your
source files to the required output with the flags -Wall, -Wextra and -Werror, and
your Makefile must not relink.
• Если субъект требует этого, вы должны отправить Makefile, который скомпилирует ваши
исходные файлы в требуемый вывод с флагами -Wall,- Wextra и -Werror, и
ваш Makefile не должен повторно связываться.

• Your Makefile must at least contain the rules $(NAME), all, clean, fclean and
re.
• Ваш Makefile должен, по крайней мере, содержать правила $(NAME), all, clean, fclean и
re.

• To turn in bonuses to your project, you must include a rule bonus to your Makefile,
which will add all the various headers, librairies or functions that are forbidden on
the main part of the project. Bonuses must be in a different file _bonus.{c/h}.
Mandatory and bonus part evaluation is done separately.
• Чтобы включить бонусы в свой проект, вы должны включить бонус правила в свой Makefile,
который добавит все различные заголовки, библиотеки или функции, которые запрещены в
основной части проекта. Бонусы должны быть в другом файле _bonus.{c/h}.
Обязательная и бонусная части оцениваются отдельно.

• If your project allows you to use your libft, you must copy its sources and its
associated Makefile in a libft folder with its associated Makefile. Your project’s
Makefile must compile the library by using its Makefile, then compile the project.
• Если ваш проект позволяет вам использовать ваш libft, вы должны скопировать его исходные файлы и
связанный с ними Makefile в папку libft вместе с соответствующим Makefile.
Makefile вашего проекта должен скомпилировать библиотеку с помощью своего Makefile, а затем скомпилировать проект.

• We encourage you to create test programs for your project even though this work
won’t have to be submitted and won’t be graded. It will give you a chance
to easily test your work and your peers’ work. You will find those tests especially
useful during your defence. Indeed, during defence, you are free to use your tests
and/or the tests of the peer you are evaluating.
• Мы рекомендуем вам создавать тестовые программы для вашего проекта, даже если эта работа
не будет представлена и не будет оценена. Это даст вам возможность
легко проверить свою работу и работу ваших коллег. Вы найдете эти тесты особенно
полезными во время вашей защиты. Действительно, во время защиты вы можете свободно использовать свои тесты
и/или тесты сверстника, которого вы оцениваете.

• Submit your work to your assigned git repository. Only the work in the git repository will be graded. If Deepthought is assigned to grade your work, it will be done
after your peer-evaluations. If an error happens in any section of your work during
Deepthought’s grading, the evaluation will stop.
• Отправляйте свою работу в назначенный вам репозиторий git. Оцениваться будет только работа в репозитории git. Если Deepthought назначается для оценки вашей работы, это будет сделано после вашей экспертной оценки. Если случится ошибка в каком-либо разделе вашей работы во время оценки Deepthought, оценка прекратится.


_________________________________________


Chapter III

Mandatory part
Обязательная часть

Program name libft.a

Turn in files *.c, libft.h, Makefile

Makefile Yes

External functs. Detailed below
Внешние факторы. Подробно описано ниже

Libft authorized Non-applicable

Description Write your own library, containing an extract of
important functions for your cursus.
Описани		Напишите свою собственную библиотеку, содержащую выдержку из
важные функции для твоего курса.

III.1 Technical considerations
III.1 Технические соображения

• It is forbidden to use global variables.
  Запрещается использовать глобальные переменные.

• If you need subfunctions to write a complex function, you should define these subfunctions as static to avoid publishing them with your library. It would be a good
habit to do this in your future projects as well.
Если вам нужны подфункции для написания сложной функцииб, вы должны определить эти
подфункции как статические, чтобы избежать публикации их в вашей библиотеке. Было бы 
хорошей привычкой делать это и ваших будущих проектах.

• Submit all files in the root of your repository.
Отправьте все файлы в корень вашего репозитория.

• It is forbidden to submit unused files.
Запрещается отправлять неиспользуемые файлы.

• Every .c must compile with flags.
Каждый файл .с должен компилироваться с флагами.

• You must use the command ar to create your librairy, using the command libtool
is forbidden.
Вы должны использовать команду ar для создания вашей библиотеки, использование команды
libtool запрещено.


________________________

III.2 Part 1 - Libc functions
III.2 Часть 1 - Функции

In this first part, you must re-code a set of the libc functions, as defined in their
man. Your functions will need to present the same prototype and behaviors as the originals. Your functions’ names must be prefixed by “ft_”. For instance strlen becomes
ft_strlen.
В этой первой части, вы должны перекодировать набор функций libc, как определно в их
мануалах. Ваши функции должны будут представлять тот же прототип и поведение, что и
оригиналы. Имена ваших функций должны иметь префикс "ft_". Например, strlen становится 
ft_strlen.

Some of the functions’ prototypes you have to re-code use the
"restrict" qualifier. This keyword is part of the c99 standard.
It is therefore forbidden to include it in your prototypes and to
compile it with the flag -std=c99.
Некоторые прототипы функций, которые вы должны перекодировать, используют квалификатор
"restrict". Это ключевое слово является частью стандарта c99.
Поэтому запрещается включать его в свои прототипы и
компилировать с флагом-std=c99.

You must re-code the following functions. These function do not need any external
functions:
Вы должны перекодировать следующие функции. Эти функции не нуждаются ни в каких внешних
функциях:

• memset
• bzero
• memcpy
• memccpy
• memmove
• memchr
• memcmp
• strlen
• strlcpy
• strlcat
• strchr
• strrchr
• strnstr
• strncmp
• atoi
• isalpha
• isdigit
• isalnum
• isascii
• isprint
• toupper
• tolower

You must also re-code the following functions, using the function “malloc”:
Вы также должны перекодировать следующие функции, используя функцию "malloc":

• calloc
• strdup

____________________________________


III.3 Part 2 - Additional functions
III.3 Часть 2 - Дополнительные функции

In this second part, you must code a set of functions that are either not included in the
libc, or included in a different form. Some of these functions can be useful to write Part
1’s functions.
В этой второй части вы должны закодировать набор функций, которые либо не включены в
libc, либо включены в другую форму. Некоторые из этих функций могут быть полезны для написанияфункций первой части.


Function name 				ft_substr
Prototype 					char *ft_substr(char const *s, unsigned int start,
							size_t len);
Turn in files 				-
Parameters 					#1. The string from which to create the substring.
							#2. The start index of the substring in the string
							’s’.
							#3. The maximum length of the substring.
Return value 				The substring. NULL if the allocation fails.
External functs. 			malloc
Description 				Allocates (with malloc(3)) and returns a substring
							from the string ’s’.
							The substring begins at index ’start’ and is of
							maximum size ’len’.

Имя функции 		ft_substr
Прототип 			char *ft_substr(char const *s, unsigned int start,
					size_t len);
Сдать файлы 		-
Параметры 			№1. Строка, из которой создается подстрока.
					#2. Начальный индекс подстроки в строке
					’s’.
					#3. Максимальная длина подстроки.
Возвращает значение Подстрока. NULL, если выделение не удается.
Внешние функции. 	мэллок
Описание 			Выделяет (с помощью malloc(3)) и возвращает подстроку
					из строки ’s’.
					Подстрока начинается с индекса "start’ и имеет
					максимальный размер "len".


Function name 		ft_strjoin
Prototype			char *ft_strjoin(char const *s1, char const *s2);
Turn in files		 -
Parameters 			#1. The prefix string.
					#2. The suffix string.
Return value 		The new string. NULL if the allocation fails.
External functs. 	malloc
Description 		Allocates (with malloc(3)) and returns a new
					string, which is the result of the concatenation
					of ’s1’ and ’s2’.


Имя функции 		ft_strjoin
Прототип			char *ft_strjoin(char const *s1, char const *s2);
Сдать файлы			 -
Параметры 			№1. Строка префикса.
					#2. Строка суффикса.
Возвращает значение Новая строка. NULL, если выделение не удается.
Внешние функции.	 мэллок
Описание 			Выделяет (с помощью malloc(3)) и возвращает новую
					строку, которая является результатом конкатенации
					’s1’ и ’s2’.					


Function name		 ft_strtrim
Prototype			 char *ft_strtrim(char const *s1, char const *set);
Turn in files		  -
Parameters			 #1. The string to be trimmed.
					 #2. The reference set of characters to trim.
Return value 		 The trimmed string. NULL if the allocation fails.
External functs. 	malloc
Description 		 Allocates (with malloc(3)) and returns a copy of
					’s1’ with the characters specified in ’set’ removed
					from the beginning and the end of the string.
Имя функции			ft_strtrim
Прототип 			char *ft_strtrim(char const *s1, char const *set);
Сдать файлы 		-
Параметры 			№1. Строка, которую нужно обрезать.
					#2. Эталонный набор символов для обрезки.
Возвращает значение Обрезанную строку. NULL, если выделение не удается.
Внешние функции. мэллок
Описание 			Выделяет (с помощью malloc(3)) и возвращает копию
					’s1’ с символами, указанными в ’set’, удаленными
					из начала и конца строки.

Function name 		ft_split
Prototype 			char **ft_split(char const *s, char c);
Turn in files 		-
Parameters 			#1. The string to be split.
					#2. The delimiter character.
Return value 		The array of new strings resulting from the split.
					NULL if the allocation fails.
External functs. 	malloc, free
Description 		Allocates (with malloc(3)) and returns an array
					of strings obtained by splitting ’s’ using the
					character ’c’ as a delimiter. The array must be
					ended by a NULL pointer.
Имя функции 		ft_split
Прототип 			char **ft_split(char const *s, char c);
Сдать файлы			-
Параметры 			№1. Строка, которую нужно разделить.
					#2. Символ-разделитель.
Возвращает значение массива новых строк, полученных в результате разделения.
					NULL, если выделение не удается.
Внешние функции. 	malloc, free
Описание 			Выделяет (с помощью malloc(3)) и возвращает массив
					строк, полученных путем разбиения ’s’ с использованием
					символа ’c’ в качестве разделителя. Массив должен
					заканчиваться нулевым указателем.

Function name 		ft_itoa
Prototype 			char *ft_itoa(int n);
Turn in files 		-
Parameters 			#1. the integer to convert.
Return value 		The string representing the integer. NULL if the
					allocation fails.
External functs. 	malloc
Description 		Allocates (with malloc(3)) and returns a string
					representing the integer received as an argument.
					Negative numbers must be handled.
Имя функции			ft_itoa
Прототип 			char *ft_itoa(int n);
Сдать файлы 		-
Параметры 			№1. целое число для преобразования.
Возвращаемое значение Строка, представляющая целое число. NULL, если
					выделение не удается.
Внешние функции. 	мэллок
Описание 			Выделяет (с помощью malloc(3)) и возвращает строку
					, представляющую целое число, полученное в качестве аргумента.
					Отрицательные числа должны быть обработаны.

Function name 		ft_strmapi
Prototype 			char *ft_strmapi(char const *s, char (*f)(unsigned
					int, char));
Turn in files 		-
Parameters 			#1. The string on which to iterate.
					#2. The function to apply to each character.
Return value 		The string created from the successive applications
					of ’f’. Returns NULL if the allocation fails.
External functs. 	malloc
Description 		Applies the function ’f’ to each character of the
					string ’s’ to create a new string (with malloc(3))
					resulting from successive applications of ’f’.
Имя функции 		ft_strmapi
Прототип 			char *ft_strmapi(char const *s, char (*f)(unsigned
					int, char));
Сдать файлы			-
Параметры 			№1. Строка, по которой нужно выполнить итерацию.
					#2. Функция, применяемая к каждому символу.
Возвращаемое значение Строка, созданная из последовательных приложений
					’f’. Возвращает NULL, если распределение завершается неудачно.
Внешние функции. 	мэллок
Описание 			Применяет функцию ’f’ к каждому символу
					строки ’s’ для создания новой строки (с помощью malloc(3))
					в результате последовательного применения " f’.


Function name 		ft_putchar_fd
Prototype 			void ft_putchar_fd(char c, int fd);
Turn in files 		-
Parameters 			#1. The character to output.
					#2. The file descriptor on which to write.
Return value 		None
External functs. 	write
Description 		Outputs the character ’c’ to the given file
					descriptor.
Имя функции 		ft_putchar_fd
Прототип 			void ft_putchar_fd(char c, int fd);
Сдать файлы 		-
Параметры 			№1. Символ для вывода.
					#2. Файловый дескриптор для записи.
Возвращаемое значение None
Внешние функции. 	write
Описание 			Выводит символ ’c’ в данный файловый
					дескриптор.


Function name 		ft_putstr_fd
Prototype 			void ft_putstr_fd(char *s, int fd);
Turn in files 		-
Parameters 			#1. The string to output.
					#2. The file descriptor on which to write.
Return value 		None
External functs. 	write
Description 		Outputs the string ’s’ to the given file
					descriptor.
Имя функции 		ft_putstr_fd
Прототип 			void ft_putstr_fd(char *s, int fd);
Сдать файлы 		-
Параметры 			№1. Строка для вывода.
					#2. Файловый дескриптор для записи.
Возвращаемое значение None
Внешние функции.	write
Описание 			Выводит строку ’s’ в данный файловый
					дескриптор.


Function name 		ft_putendl_fd
Prototype 			void ft_putendl_fd(char *s, int fd);
Turn in files 		-
Parameters 			#1. The string to output.
					#2. The file descriptor on which to write.
Return value 		None
External functs. 	write
Description 		Outputs the string ’s’ to the given file
					descriptor, followed by a newline.
Имя функции 		ft_putendl_fd
Прототип 			void ft_putendl_fd(char *s, int fd);
Сдать файлы 		-
Параметры 			№1. Строка для вывода.
					#2. Файловый дескриптор для записи.
Возвращаемое значение None
Внешние функции.	write
Описание 			Выводит строку ’s’ в данный файловый
					дескриптор, за которой следует новая строка.


Function name 		ft_putnbr_fd
Prototype 			void ft_putnbr_fd(int n, int fd);
Turn in files 		-
Parameters 			#1. The integer to output.
					#2. The file descriptor on which to write.
Return value 		None
External functs. 	write
Description 		Outputs the integer ’n’ to the given file
					descriptor.
Имя функции 		ft_putnbr_fd
Прототип 			void ft_putnbr_fd(int n, int fd);
Сдать файлы 		-
Параметры 			№1. Целое число для вывода.
					#2. Файловый дескриптор для записи.
Возвращаемое значение None
Внешние функции.	write
Описание			Выводит целое число ’n’ в данный файловый
					дескриптор.
	

_______________________________


Chapter IV

Bonus part
Бонусная часть

If you successfully completed the mandatory part, you’ll enjoy taking it further. You can
see this last section as Bonus Points.
Having functions to manipulate memory and strings is very useful, but you’ll soon
discover that having functions to manipulate lists is even more useful.
You’ll use the following structure to represent the elements of your list. This structure
must be added to your libft.h file.

	make bonus will add the bonus functions to the libft.a library.

You do not have to add _bonus to the .c files and the header in this part. Only add
_bonus to the files containing your own bonus functions.

Если вы успешно выполнили обязательную часть, вам понравится идти дальше. Вы можете
увидеть этот последний раздел в качестве бонусных очков.
Наличие функций для манипулирования памятью и строками очень полезно, но вскоре вы
обнаружите, что функции для манипулирования списками еще более полезны.
Вы будете использовать следующую структуру для представления элементов вашего списка. Эта структура должна быть добавлена в ваш файл libfdt.h.

	make bonus добавит бонусные функции в библиотеку libft.a.

Вам не нужно добавлять _bonus в файлы .c и заголовок в этой части. Только добавить
_bonus к файлам, содержащим ваши собственные бонусные функции.


typedef struct s_list
{
void *content;
struct s_list *next;
} t_list;


Here is a description of the fields of the t_list struct:
Вот описание полей структуры t_list:

• content : The data contained in the element. The void * allows to store any kind
of data.
• содержание : Данные, содержащиеся в элементе. Пустота * позволяет хранить любые
данные.

• next : The next element’s address or NULL if it’s the last element.
• next : Адрес следующего элемента или NULL, если это последний элемент.


The following functions will allow you to easily use your lists.
Следующие функции позволят вам легко использовать ваши списки.

Function name 		ft_lstnew
Prototype 			t_list *ft_lstnew(void *content);
Turn in files 		-
Parameters 			#1. The content to create the new element with.
Return value 		The new element.
External functs. 	malloc
Description 		Allocates (with malloc(3)) and returns a new
					element. The variable ’content’ is initialized
					with the value of the parameter ’content’. The
					variable ’next’ is initialized to NULL.
Имя функции 		ft_lstnew
Прототип			 t_list *ft_lstnew(void *content);
Сдать файлы 		-
Параметры 			№1. Содержимое для создания нового элемента.
Возвращает значение нового элемента.
Внешние функции. 	мэллок
Описание 			Выделяет (с помощью malloc(3)) и возвращает новый
					элемент. Переменная "content" инициализируется
					значением параметра " content’.
					Переменная " next’ инициализируется нулем.

Function name 		ft_lstadd_front
Prototype 			void ft_lstadd_front(t_list **lst, t_list *new);
Turn in files 		-
Parameters 			#1. The address of a pointer to the first link of
					a list.
					#2. The address of a pointer to the element to be
					added to the list.
Return value 		None
External functs. 	None
Description 		Adds the element ’new’ at the beginning of the
					list.
Имя функции 		ft_lstadd_front
Прототип 			void ft_lstadd_front(t_list **lst, t_list *new);
Сдать файлы 		-
Параметры 			№1. Адрес указателя на первую ссылку
					списка.
					#2. Адрес указателя на элемент, который будет
					добавлен в список.
Возвращаемое значение None
Внешние функции. 	Нет
Описание 			Добавляет элемент 'новый’ в начало
					списка.


Function name 		ft_lstsize
Prototype 			int ft_lstsize(t_list *lst);
Turn in files 		-
Parameters 			#1. The beginning of the list.
Return value 		Length of the list.
External functs. 	None
Description 		Counts the number of elements in a list.
Имя функции 		ft_lstsize
Prototype 			int ft_lstsize(t_list *lst);
Сдать файлы			 -
Параметры 			№1. Начало списка.
Возвращаемое значение Длина списка.
Внешние функции. 	Нет
Описание 			Подсчитывает количество элементов в списке.


Function name 		ft_lstlast
Prototype 			t_list *ft_lstlast(t_list *lst);
Turn in files 		-
Parameters 			#1. The beginning of the list.
Return value 		Last element of the list.
External functs. 	None
Description 		Returns the last element of the list.
Имя функции 		ft_lstlast
Прототип 			t_list *ft_lstlast(t_list *lst);
Сдать файлы 		-
Параметры 			№1. Начало списка.
Возвращает значение Последнего элемента списка.
Внешние функции. Нет
Описание 			Возвращает последний элемент списка.

Function name 		ft_lstadd_back
Prototype 			void ft_lstadd_back(t_list **lst, t_list *new);
Turn in files 		-
Parameters 			#1. The address of a pointer to the first link of
					a list.
					#2. The address of a pointer to the element to be
					added to the list.
Return value 		None
External functs. 	None
Description 		Adds the element ’new’ at the end of the list.
Имя функции 		ft_lstadd_back
Прототип 			void ft_lstadd_back(t_list **lst, t_list *new);
Сдать файлы			-
Параметры 			№1. Адрес указателя на первую ссылку
					списка.
					#2. Адрес указателя на элемент, который будет
					добавлен в список.
Возвращаемое значение None
Внешние функции. 	Нет
Описание 			Добавляет элемент " новый’ в конец списка.


Function name 		ft_lstdelone
Prototype 			void ft_lstdelone(t_list *lst, void (*del)(void
					*));
Turn in files 		-
Parameters 			#1. The element to free.
					#2. The address of the function used to delete the
					content.
Return value 		None
External functs. 	free
Description T		akes as a parameter an element and frees the
					memory of the element’s content using the function
					’del’ given as a parameter and free the element.
					The memory of ’next’ must not be freed.
Имя функции 		ft_lstdelone
Прототип 			void ft_lstdelone(t_list *lst, void (*del)(void
					*));
Сдать файлы 		-
Параметры 			№1. Стихия, чтобы освободиться.
					#2. Адрес функции, используемой для удаления
					содержимого.
Возвращаемое значение None
Внешние функции.	free
Описание 			Принимает в качестве параметра элемент и освобождает
					память содержимого элемента с помощью функции
					"del", заданной в качестве параметра, и освобождает элемент.
					Память о "следующем" не должна быть освобождена.

Function name 		ft_lstclear
Prototype 			void ft_lstclear(t_list **lst, void (*del)(void
					*));
Turn in files 		-
Parameters 			#1. The adress of a pointer to an element.
					#2. The adress of the function used to delete the
					content of the element.
Return value 		None
External functs. 	free
Description 		Deletes and frees the given element and every
					successor of that element, using the function ’del’
					and free(3).
					Finally, the pointer to the list must be set to
					NULL.
Имя функции			ft_lstclear
Прототип 			void ft_lstclear(t_list **lst, void (*del)(void
					*));
Сдать файлы 		-
Параметры 			№1. Адрес указателя на элемент.
					#2. Адрес функции, используемой для удаления
					содержимого элемента.
Возвращаемое значение None
Внешние функции.	free
Описание 			Удаляет и освобождает данный элемент и каждый
					его преемник, используя функции del
					и free(3).
					Наконец, указатель на список должен быть установлен в
					NULL.


Function name 		ft_lstiter
Prototype 			void ft_lstiter(t_list *lst, void (*f)(void *));
Turn in files 		-
Parameters 			#1. The adress of a pointer to an element.
					#2. The adress of the function used to iterate on
					the list.
Return value 		None
External functs. 	None
Description 		Iterates the list ’lst’ and applies the function
					’f’ to the content of each element.
Имя функции 		ft_lstiter
Прототип 			void ft_lstiter(t_list *lst, void (*f)(void *));
Сдать файлы 		-
Параметры 			№1. Адрес указателя на элемент.
					#2. Адрес функции, используемой для итерации по
					списку.
Возвращаемое значение None
Внешние функции. 	Нет
Описание 			Итеративно к списоку "lst’ применяет функцию
					" f " к содержимому каждого элемента.

Function name 		ft_lstmap
Prototype 			t_list *ft_lstmap(t_list *lst, void *(*f)(void *),
					void (*del)(void *));
Turn in files		 -
Parameters 			#1. The adress of a pointer to an element.
					#2. The adress of the function used to iterate on
					the list.
					#3. The adress of the function used to delete the
					content of an element if needed.
Return value 		The new list. NULL if the allocation fails.
External functs. 	malloc, free
Description 		Iterates the list ’lst’ and applies the function
					’f’ to the content of each element. Creates a new
					list resulting of the successive applications of
					the function ’f’. The ’del’ function is used to
					delete the content of an element if needed.
Имя функции 		ft_lstmap
Прототип 			t_list *ft_lstmap(t_list *lst, void *(*f)(void *),
					void (*del)(void *));
Сдать файлы 		-
Параметры 			№1. Адрес указателя на элемент.
					#2. Адрес функции, используемой для итерации по
					списку.
					#3. Адрес функции, используемой для удаления
					содержимого элемента при необходимости.
Возвращает значение нового списка. NULL, если выделение не удается.
Внешние функции. 	free, malloc
Описание 			Итеративно по списку "lst’ применяет функцию
					" f " к содержимому каждого элемента. Создает новый
					список, полученный в результате последовательных применений
					функции ’f’. Функция " del " используется для
					удаления содержимого элемента, если это необходимо.


You are free to add any function to your libft as you see fit.
Вы можете добавить любую функцию в свой libft по своему усмотрению.
