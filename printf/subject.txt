printf


Because putnbr and putstr aren’t enough

Потому что putnbr и putstr недостаточно


Summary: This project is pretty straight forward. You will recode printf. Hopefully you
will be able to reuse it in future project without the fear of being flagged as a cheater.
You will mainly learn how to use variadic arguments.

Резюме: Этот проект довольно прямолинейен. Вы перекодируете printf. Надеюсь, вы
сможете повторно использовать его в будущем проекте, не опасаясь быть помеченным как мошенник.
В основном вы узнаете, как использовать переменные аргументы.

_________________________


Contents

I Introduction 2

II Common Instructions 3

III Mandatory part 4

IV Bonus part

_________________________

Chapter I

Introduction

The versatility of the printf function in C represents a great exercise in programming for
us. This project is of moderate difficulty. It will enable you to discover variadic functions
in C.
The key to a successful ft_printf is a well-structured and good extensible code.

Глава I

Введение

Универсальность функции printf в C представляет для нас отличное упражнение в программировании.
Этот проект средней сложности. Это позволит вам обнаружить вариадические функции
в C.
Ключом к успешному ft_printf является хорошо структурированный и хороший расширяемый код.

_______________________

Chapter II

Common Instructions

• Your project must be written in accordance with the Norm. If you have bonus
files/functions, they are included in the norm check and you will receive a 0 if there
is a norm error inside.

• Your functions should not quit unexpectedly (segmentation fault, bus error, double
free, etc) apart from undefined behaviors. If this happens, your project will be
considered non functional and will receive a 0 during the evaluation.

• All heap allocated memory space must be properly freed when necessary. No leaks
will be tolerated.

• If the subject requires it, you must submit a Makefile which will compile your
source files to the required output with the flags -Wall, -Wextra and -Werror, and
your Makefile must not relink.

• Your Makefile must at least contain the rules $(NAME), all, clean, fclean and
re.

• To turn in bonuses to your project, you must include a rule bonus to your Makefile,
which will add all the various headers, librairies or functions that are forbidden on
the main part of the project. Bonuses must be in a different file _bonus.{c/h}.
Mandatory and bonus part evaluation is done separately.

• If your project allows you to use your libft, you must copy its sources and its
associated Makefile in a libft folder with its associated Makefile. Your project’s
Makefile must compile the library by using its Makefile, then compile the project.

• We encourage you to create test programs for your project even though this work
won’t have to be submitted and won’t be graded. It will give you a chance
to easily test your work and your peers’ work. You will find those tests especially
useful during your defence. Indeed, during defence, you are free to use your tests
and/or the tests of the peer you are evaluating.

• Submit your work to your assigned git repository. Only the work in the git repository will be graded. If Deepthought is assigned to grade your work, it will be done
after your peer-evaluations. If an error happens in any section of your work during
Deepthought’s grading, the evaluation will stop.


Глава II


Общие инструкции

• Ваш проект должен быть написан в соответствии с нормой. Если у вас есть бонусные
файлы/функции, они включены в проверку нормы, и вы получите 0, если внутри
есть ошибка нормы.

• Ваши функции не должны завершаться неожиданно (ошибка сегментации, ошибка шины, двойное
свободное и т. Д.), Кроме неопределенного поведения. Если это произойдет, ваш проект будет
считаться нефункциональным и получит 0 во время оценки.

• При необходимости все пространство памяти, выделенное для кучи, должно быть правильно освобождено. Утечки
не допускаются.

• Если субъект требует этого, вы должны отправить файл Makefile, который скомпилирует ваши
исходные файлы в требуемый вывод с флагами-Wall, -Wextra и-Werror, и
ваш файл Makefile не должен повторно связываться.

• Ваш файл Makefile должен, по крайней мере, содержать правила $(NAME), all, clean, fclean и
re.

• Чтобы включить бонусы в свой проект, вы должны включить бонус правила в свой файл Makefile,
который добавит все различные заголовки, библиотеки или функции, которые запрещены в
основной части проекта. Бонусы должны быть в другом файле _bonus.{c/h}.
Обязательная и бонусная части оцениваются отдельно.

• Если ваш проект позволяет вам использовать ваш libft, вы должны скопировать его исходные файлы и
связанный с ним файл Makefile в папку libft с соответствующим файлом Makefile. Ваш проект
Makefile должен скомпилировать библиотеку, используя ее Makefile, а затем скомпилировать проект.

• Мы рекомендуем вам создавать тестовые программы для вашего проекта, даже если эта работа
не будет представлена и не будет оценена. Это даст вам возможность
легко проверить свою работу и работу ваших коллег. Вы найдете эти тесты особенно
полезными во время вашей защиты. Действительно, во время защиты вы можете свободно использовать свои тесты
и/или тесты сверстника, которого вы оцениваете.

• Отправьте свою работу в назначенный вам репозиторий git. Будет оцениваться только работа в репозитории git. Если Deepthought назначена для оценки вашей работы, это будет сделано
после оценки ваших коллег. Если в каком-либо разделе вашей работы во время
Оценка глубокой мысли, оценка прекратится.


_________________________________


Chapter III

Mandatory part


Program name 		libftprintf.a

Turn in files 		*.c, */*.c, *.h, */*.h, Makefile

Makefile 			all, clean, fclean, re, bonus

External functs.	malloc, free, write, va_start, va_arg, va_copy,
					va_end

Libft authorized 	yes

Description 		Write a library that contains ft_printf, a function
					that will mimic the real printf

• The prototype of ft_printf should be int ft_printf(const char *, ...);

• You have to recode the libc’s printf function

• It must not do the buffer management like the real printf

• It will manage the following conversions: cspdiuxX%

• It will manage any combination of the following flags: ’-0.*’ and minimum field
width with all conversions

• It will be compared with the real printf

• You must use the command ar to create your librairy, using the command libtool
is forbidden.
man 3 printf / man 3 stdarg

Описание			Напишите библиотеку, содержащую ft_printf, функцию,
					которая будет имитировать реальную printf

• Прототип ft_printf должен быть в ft_printf(const char *, ...);

• Вы должны перекодировать функцию printf libc

• Он не должен выполнять управление буфером, как настоящий printf

• Он будет управлять следующими преобразованиями: cspdiuxX%

• Он будет управлять любой комбинацией следующих флагов: ’-0.*’ и минимальной
шириной поля со всеми преобразованиями

• Он будет сравниваться с реальным printf

• * Для создания библиотеки необходимо использовать команду ar, использование команды libtool
запрещено.

___________________________________


Chapter IV


Bonus part

• If the Mandatory part is not perfect don’t even think about bonuses

• You don’t need to do all the bonuses

• Manage one or more of the following conversions: nfge

• Manage one or more of the following flags: l ll h hh

• Manage all the following flags: ’# +’ (yes, one of them is a space)

Глава IV

Бонусная часть

• Если обязательная часть не идеальна, даже не думайте о бонусах

• Вам не нужно делать все бонусы

• Управление одним или несколькими из следующих преобразований: nfge

• Управление одним или несколькими из следующих флагов: l ll h hh

• Управление всеми следующими флагами: ’# +’ (да, один из них-пробел)
_____________________________
